{"version":3,"sources":["serviceWorker.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","actions.js","constants.js","reducer.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","Card","_ref","id","name","email","react_default","a","createElement","className","alt","src","concat","CardList","robots","map","user","components_Card","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","this","onRequestRobots","_this$props","searchField","onSearchChange","isPending","filterRobots","filter","toLowerCase","includes","components_SearchBox","components_Scroll","components_CardList","Component","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","response","json","data","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","arguments","length","undefined","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","es","src_containers_App","document","getElementById","URL","process","href","origin","addEventListener","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"mNAYMA,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,KAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,gHAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,UAO5BW,MAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,iDCnFlDC,EAXH,SAAAC,GAAqB,IAAnBC,EAAmBD,EAAnBC,GAAGC,EAAgBF,EAAhBE,KAAMC,EAAUH,EAAVG,MACtB,OACMC,EAAAC,EAAAC,cAAA,OAAKC,UAAW,uDACfH,EAAAC,EAAAC,cAAA,OAAME,IAAI,SAASC,IAAG,wBAAAC,OAA0BT,EAA1B,mBACtBG,EAAAC,EAAAC,cAAA,MAAIC,UAAU,QAAQL,GACtBE,EAAAC,EAAAC,cAAA,SAAIH,KCcGQ,EAjBE,SAAAX,GAAY,IAAVY,EAAUZ,EAAVY,OAElB,OACSR,EAAAC,EAAAC,cAAA,WACCM,EAAOC,IAAI,SAACC,GACrB,OACAV,EAAAC,EAAAC,cAACS,EAAD,CAAMC,IAAMF,EAAKb,GACfA,GAAIa,EAAKb,GACTC,KAAMY,EAAKZ,KACXC,MAAOW,EAAKX,YCIDc,EAfG,SAAAjB,GAAsB,IAAnBkB,EAAmBlB,EAAnBkB,aACnB,OACEd,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,SACEC,UAAU,mCACVY,KAAK,SACLC,YAAY,gBACZC,SAAUH,OCELI,SATA,SAACC,GACf,OACQnB,EAAAC,EAAAC,cAAA,OAAKkB,MAAO,CAACC,UAAW,SAAUC,OAAO,kBAAkBC,OAAO,UACjEJ,EAAMK,mBCwBVC,8LAKHC,KAAKP,MAAMQ,mDAKL,IAAAC,EAC0DF,KAAKP,MAAvDU,EADRD,EACQC,YAAaC,EADrBF,EACqBE,eAAgBtB,EADrCoB,EACqCpB,OAASuB,EAD9CH,EAC8CG,UAE/CC,EAAexB,EAAOyB,OAAO,SAAAzB,GACjC,OAAOA,EAAOV,KAAKoC,cAAcC,SAASN,EAAYK,iBAEpD,OAAOH,EACT/B,EAAAC,EAAAC,cAAA,yBAEDF,EAAAC,EAAAC,cAAA,OAAKC,UAAW,MAChBH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,WAAd,eACAH,EAAAC,EAAAC,cAACkC,EAAD,CAAYtB,aAAcgB,IAC1B9B,EAAAC,EAAAC,cAACmC,EAAD,KACKrC,EAAAC,EAAAC,cAACoC,EAAD,CAAW9B,OAAQwB,aAvBTO,aAkCHC,cApDS,SAAArD,GACvB,MAAM,CACL0C,YAAY1C,EAAMsD,aAAaZ,YAC/BrB,OAAOrB,EAAMuD,cAAclC,OAC3BuB,UAAU5C,EAAMuD,cAAcX,UAC9BrC,MAAOP,EAAMuD,cAAchD,QAKD,SAACiD,GAC5B,MAAM,CACNb,eAAe,SAACc,GAAD,OAAUD,ECdnB,CACL5B,KCViC,sBDW5B8B,QDY2CD,EAAME,OAAOC,SAC9DpB,gBAAgB,kBAAKgB,ECRa,SAACA,GACnCA,EAAS,CAAC5B,KCd2B,0BDerCiC,MAAM,8CACJnE,KAAK,SAAAoE,GAAQ,OAAGA,EAASC,SACzBrE,KAAK,SAAAsE,GAAI,OAAER,EAAU,CAAC5B,KChBa,wBDgBgB8B,QAAQM,MAC3D1D,MAAM,SAAAC,GAAK,OAAGiD,EAAS,CAAC5B,KChBU,uBDgBkB8B,QAAQnD,WD0ChD8C,CAA6Cf,wBGzDtD2B,EAAoB,CACzBvB,YAAY,IAaPwB,EAAmB,CACxBtB,WAAU,EACVvB,OAAO,GACPd,MAAM,oBCZD4D,EAASC,yBACTC,EAAcC,YAAgB,CAAEhB,aDFT,WAAwC,IAAvCtD,EAAuCuE,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAjCN,EAAoBS,EAAaH,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAN,GAE9D,OAAOG,EAAO9C,MACb,IDbiC,sBCcjC,OAAO+C,OAAOC,OAAO,GAAI5E,EAAO,CAAC0C,YAAagC,EAAOhB,UACrD,QACA,OAAO1D,ICJ2CuD,cDcvB,WAA2C,IAA1CvD,EAA0CuE,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAlCL,EAAoBQ,EAAcH,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAN,GAEjE,OAAOG,EAAO9C,MACb,ID1BoC,wBC2BpC,OAAO+C,OAAOC,OAAQ,GAAK5E,EAAO,CAAC4C,WAAW,IAC9C,ID3BoC,wBC4BpC,OAAO+B,OAAOC,OAAS,GAAI5E,EAAO,CAACqB,OAAOqD,EAAOhB,QAASd,WAAW,IACrE,ID5BmC,uBC6BnC,OAAO+B,OAAOC,OAAQ,GAAI5E,EAAQ,CAACO,MAAOmE,EAAOhB,QAASd,WAAU,IACpE,QACA,OAAO5C,MCtBH6E,EAAQC,YACZT,EACAU,YAAgBC,IAAiBb,IAGnCc,IAASC,OACPrE,EAAAC,EAAAC,cAACoE,EAAA,EAAD,CAAUN,MAAOA,GACfhE,EAAAC,EAAAC,cAACqE,EAAD,OAEFC,SAASC,eAAe,STFnB,SAAkBhG,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIgG,IAAIC,oBAAwBxG,OAAOC,SAASwG,MACpDC,SAAW1G,OAAOC,SAASyG,OAIvC,OAGF1G,OAAO2G,iBAAiB,OAAQ,WAC9B,IAAMtG,EAAK,GAAA8B,OAAMqE,oBAAN,sBAEP1G,GAgEV,SAAiCO,EAAOC,GAEtCuE,MAAMxE,GACHK,KAAK,SAAAoE,GAEJ,IAAM8B,EAAc9B,EAAS+B,QAAQC,IAAI,gBAEnB,MAApBhC,EAASiC,QACO,MAAfH,IAA8D,IAAvCA,EAAYI,QAAQ,cAG5CzG,UAAUC,cAAcyG,MAAMvG,KAAK,SAAAC,GACjCA,EAAauG,aAAaxG,KAAK,WAC7BV,OAAOC,SAASkH,aAKpB/G,EAAgBC,EAAOC,KAG1BgB,MAAM,WACLJ,QAAQC,IACN,mEArFAiG,CAAwB/G,EAAOC,GAI/BC,UAAUC,cAAcyG,MAAMvG,KAAK,WACjCQ,QAAQC,IACN,+GAMJf,EAAgBC,EAAOC,MSpB/BE","file":"static/js/main.46c8ab4a.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\n\nconst Card =({id,name, email}) =>{\n\treturn(\n       <div className ='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n        <img  alt='robots' src={`https://robohash.org/${id}?size=200x200` }/>\n        <h1 className='size'>{name}</h1>\n        <p>{email}</p>\n       </div>\n\n\t\t)\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\n\nconst CardList = ({robots})=>{\n\t \n\treturn (\n          <div>\n         { robots.map((user)=>{\n\t\treturn (\n\t\t<Card key ={user.id} \n\t\t  id={user.id} \n\t\t  name={user.name} \n\t\t  email={user.email}/>\n\t\t)\n\t\t}) } \n\t\t </div> \n       \n\t\t);\n}\n\nexport default CardList;","import React from \"react\";\n\nconst SearchBox = ({ searchChange }) => {\n  return (\n    <div className=\"pa2\">\n      <label>\n        <input\n          className=\"pa3 ba b--green bg-lightest-blue\"\n          type=\"search\"\n          placeholder=\"search robots\"\n          onChange={searchChange}\n        />\n      </label>\n    </div>\n  );\n};\n\nexport default SearchBox;\n","import React from 'react';\n\n\nconst Scroll = (props) =>{\n\treturn(\n         <div style={{overflowY: 'scroll' ,border:'2px solid black',height:'800px'}}>\n         {props.children}\n         </div>\n\t\t)\n}\n\n\nexport default Scroll;","import React , {Component} from 'react';\nimport CardList from '../components/CardList';\n\nimport SearchBox from '../components/SearchBox';\nimport './App.css';\nimport Scroll from '../components/Scroll';\n\nimport { setSearchField, requestRobots } from '../actions';\nimport { connect } from 'react-redux';\n\n\n\nconst mapStateToProps = state =>{\n\treturn{\n\t\tsearchField:state.searchRobots.searchField,\n\t\trobots:state.requestRobots.robots,\n\t\tisPending:state.requestRobots.isPending,\n\t\terror: state.requestRobots.error\n\t}\n}\n\n\nconst mapDispatchToProps =  (dispatch )=> {\n\treturn{\n\tonSearchChange:(event)=> dispatch(setSearchField(event.target.value)),\n\tonRequestRobots:()=> dispatch(requestRobots())\n}\n}\n\n\nclass App extends Component{\n     \n\n\tcomponentDidMount(){\n\n\t  this.props.onRequestRobots()\n\t   \n\t}\n\t\n\n\trender(){\n          const {searchField, onSearchChange, robots , isPending}= this.props;\n\n\t\tconst filterRobots = robots.filter(robots=>{\n\t\t\t return robots.name.toLowerCase().includes(searchField.toLowerCase())\n\t\t})\n\t\t    return isPending?\n\t\t\t <h1>Loading....</h1>:\n\t\t (\n\t \t<div className= 'tc'>\n\t \t<h1 className='font f1'>RoboFriends</h1>\n\t \t<SearchBox  searchChange={onSearchChange}/>\n\t \t<Scroll>\n\t \t     <CardList  robots={filterRobots} />\n        </Scroll>\n\t \t</div>\n\t \t);\n\t\t}\n\t\t\n\t   \t\n\t \t\n\t \t}\n\t \n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import {\n\t    CHANGE_SEARCH_FIELD,\n\t    REQUEST_ROBOTS_PENDING,\n\t    REQUEST_ROBOTS_SUCCESS,\n\t    REQUEST_ROBOTS_FAILED\n } from './constants'\n\n\nexport const setSearchField = (text) => {\n\t\n\treturn{\n\t\ttype:CHANGE_SEARCH_FIELD,\n       payload:text\n\t}\n    \n}\n\nexport const requestRobots = () => (dispatch) =>{\n\tdispatch({type:REQUEST_ROBOTS_PENDING});\n\tfetch('https://jsonplaceholder.typicode.com/users')\n\t\t.then(response =>response.json())\n\t\t.then(data=>dispatch ({type:REQUEST_ROBOTS_SUCCESS, payload:data}))\n\t\t.catch(error =>dispatch({type:REQUEST_ROBOTS_FAILED, payload:error}))\n}","\nexport const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUES_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUES_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUES_ROBOTS_FAILED';","import {\n\t    CHANGE_SEARCH_FIELD,\n\t    REQUEST_ROBOTS_PENDING,\n\t    REQUEST_ROBOTS_SUCCESS,\n\t    REQUEST_ROBOTS_FAILED\n } from './constants'\n\nconst initialStateSearch ={\n\tsearchField:''\n}\n\n export const searchRobots = (state=initialStateSearch ,action={})=> {\n \t\n\tswitch(action.type){\n\t\tcase CHANGE_SEARCH_FIELD:\n\t\treturn Object.assign({}, state ,{searchField: action.payload});\n\t\tdefault:\n\t\treturn state;\n\t}\n}\n\nconst initialStateRobots={\n\tisPending:false,\n\trobots:[],\n\terror:''\n}\n\nexport const requestRobots = (state = initialStateRobots, action ={}) =>{\n\n\tswitch(action.type){\n\t\tcase REQUEST_ROBOTS_PENDING:\n\t\treturn Object.assign( {} , state, {isPending: true})\n\t\tcase REQUEST_ROBOTS_SUCCESS:\n\t\treturn Object.assign ( {} ,state, {robots:action.payload, isPending: false})\n\t\tcase REQUEST_ROBOTS_FAILED:\n\t\treturn Object.assign( {}, state , {error: action.payload, isPending:false})\n\t\tdefault:\n\t\treturn state;\n\t}\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport App from \"./containers/App\";\nimport \"./index.css\";\nimport \"tachyons\";\nimport { Provider } from \"react-redux\";\nimport { createStore, applyMiddleware, combineReducers } from \"redux\";\nimport { searchRobots, requestRobots } from \"./reducer\";\nimport { createLogger } from \"redux-logger\";\nimport thunkMiddleware from \"redux-thunk\";\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\n\nconst store = createStore(\n  rootReducer,\n  applyMiddleware(thunkMiddleware, logger)\n);\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}